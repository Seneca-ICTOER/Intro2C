"use strict";(self.webpackChunkipc144=self.webpackChunkipc144||[]).push([[560],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>k});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),d=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},s=function(e){var t=d(e.components);return r.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,s=p(e,["components","mdxType","originalType","parentName"]),m=d(n),k=a,u=m["".concat(l,".").concat(k)]||m[k]||c[k]||o;return n?r.createElement(u,i(i({ref:t},s),{},{components:n})):r.createElement(u,i({ref:t},s))}));function k(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=m;var p={};for(var l in t)hasOwnProperty.call(t,l)&&(p[l]=t[l]);p.originalType=e,p.mdxType="string"==typeof e?e:a,i[1]=p;for(var d=2;d<o;d++)i[d]=n[d];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},9770:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>c,frontMatter:()=>o,metadata:()=>p,toc:()=>d});var r=n(3117),a=(n(7294),n(3905));n(8209);const o={id:"operators",title:"Operators",sidebar_position:4,description:"Operator Precedence is the order in which operands are bound to operators"},i="Operator Precedence",p={unversionedId:"Resources-Appendices/operators",id:"Resources-Appendices/operators",title:"Operators",description:"Operator Precedence is the order in which operands are bound to operators",source:"@site/docs/Resources-Appendices/operators.md",sourceDirName:"Resources-Appendices",slug:"/Resources-Appendices/operators",permalink:"/Resources-Appendices/operators",draft:!1,editUrl:"https://github.com/Seneca-ICTOER/Intro2C/tree/main/docs/Resources-Appendices/operators.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{id:"operators",title:"Operators",sidebar_position:4,description:"Operator Precedence is the order in which operands are bound to operators"},sidebar:"courseNotesSidebar",previous:{title:"Data Conversions",permalink:"/Resources-Appendices/data-conversions"},next:{title:"Suggested Weekly Schedule",permalink:"/Resources-Appendices/suggested-weekly-schedule"}},l={},d=[],s={toc:d};function c(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"operator-precedence"},"Operator Precedence"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:"left"},"Operators"),(0,a.kt)("th",{parentName:"tr",align:"left"},"Associativity"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:"left"},(0,a.kt)("inlineCode",{parentName:"td"},"()"),"\xa0","\xa0"," ",(0,a.kt)("inlineCode",{parentName:"td"},"[]"),(0,a.kt)("br",null),(0,a.kt)("inlineCode",{parentName:"td"},"++"),"(postfix) ","\xa0",(0,a.kt)("inlineCode",{parentName:"td"},"--")," postfix)",(0,a.kt)("br",null)," ",(0,a.kt)("inlineCode",{parentName:"td"},".")," ","\xa0"," ",(0,a.kt)("inlineCode",{parentName:"td"},"->")," (struct member access)"),(0,a.kt)("td",{parentName:"tr",align:"left"},"left to right ",(0,a.kt)("strong",{parentName:"td"},"HIGH"),(0,a.kt)("br",null),"right to left")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:"left"},(0,a.kt)("inlineCode",{parentName:"td"},"++"),"(prefix) ","\xa0","\xa0","\xa0",(0,a.kt)("inlineCode",{parentName:"td"},"--"),"(prefix)",(0,a.kt)("br",null),(0,a.kt)("inlineCode",{parentName:"td"},"!"),"\xa0","\xa0"," ",(0,a.kt)("inlineCode",{parentName:"td"},"+"),"(unary) ","\xa0",(0,a.kt)("inlineCode",{parentName:"td"},"-"),"(unary) ","\xa0",(0,a.kt)("inlineCode",{parentName:"td"},"*"),"\xa0","\xa0"," ",(0,a.kt)("inlineCode",{parentName:"td"},"&")),(0,a.kt)("td",{parentName:"tr",align:"left"},"left to right",(0,a.kt)("br",null),"right to left")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:"left"},(0,a.kt)("inlineCode",{parentName:"td"},"*"),"\xa0","\xa0"," ",(0,a.kt)("inlineCode",{parentName:"td"},"/"),"\xa0","\xa0"," ",(0,a.kt)("inlineCode",{parentName:"td"},"%")),(0,a.kt)("td",{parentName:"tr",align:"left"},"left to right ",(0,a.kt)("strong",{parentName:"td"},"MEDIUM"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:"left"},(0,a.kt)("inlineCode",{parentName:"td"},"+"),"(binary) ",(0,a.kt)("inlineCode",{parentName:"td"},"-"),"(binary)"),(0,a.kt)("td",{parentName:"tr",align:"left"},"left to right")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:"left"},(0,a.kt)("inlineCode",{parentName:"td"},"<"),"\xa0","\xa0"," ",(0,a.kt)("inlineCode",{parentName:"td"},"<="),"\xa0","\xa0"," ",(0,a.kt)("inlineCode",{parentName:"td"},">"),"\xa0","\xa0"," ",(0,a.kt)("inlineCode",{parentName:"td"},">=")),(0,a.kt)("td",{parentName:"tr",align:"left"},"left to right")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:"left"},(0,a.kt)("inlineCode",{parentName:"td"},"=="),"\xa0","\xa0"," ",(0,a.kt)("inlineCode",{parentName:"td"},"!=")),(0,a.kt)("td",{parentName:"tr",align:"left"},"left to right")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:"left"},(0,a.kt)("inlineCode",{parentName:"td"},"&&")),(0,a.kt)("td",{parentName:"tr",align:"left"},"left to right")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:"left"},(0,a.kt)("code",null,"|","|")),(0,a.kt)("td",{parentName:"tr",align:"left"},"left to right")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:"left"},(0,a.kt)("inlineCode",{parentName:"td"},"?:")),(0,a.kt)("td",{parentName:"tr",align:"left"},"right to left ",(0,a.kt)("strong",{parentName:"td"},"LOW"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:"left"},(0,a.kt)("inlineCode",{parentName:"td"},"="),"\xa0","\xa0",(0,a.kt)("inlineCode",{parentName:"td"},"+="),"\xa0","\xa0",(0,a.kt)("inlineCode",{parentName:"td"},"-="),"\xa0","\xa0",(0,a.kt)("inlineCode",{parentName:"td"},"*="),"\xa0","\xa0"," ",(0,a.kt)("inlineCode",{parentName:"td"},"/="),"\xa0","\xa0"," ",(0,a.kt)("inlineCode",{parentName:"td"},"%=")),(0,a.kt)("td",{parentName:"tr",align:"left"},"right to left")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:"left"},(0,a.kt)("inlineCode",{parentName:"td"},",")),(0,a.kt)("td",{parentName:"tr",align:"left"},"left to right")))),(0,a.kt)("p",null,"Unary ",(0,a.kt)("inlineCode",{parentName:"p"},"+"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"-")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"*")," have higher precedence than the binary forms. The operator ",(0,a.kt)("inlineCode",{parentName:"p"},"()")," refers to function call."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Precedence")," determines the order in which operands are bound to operators. Operators on the same line have the same precedence; rows are in order of decreasing precedence. C does ",(0,a.kt)("em",{parentName:"p"},"not")," specify the order in which the operands of an operator are evaluated. Similarly, the order in which function arguments are evaluated is not specified. Examples:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},'// Example-1:\nx = f() + g();\n\n// Example-2:\na[i] = i++;\n\n// Example-3:\nprintf("%d %d\\n",++n,power(2,n));\n\n// Example-4:\nz = x / ++x;\n')),(0,a.kt)("p",null,"Programs should not depend upon the order of evaluation of expressions, except as guaranteed by ANSI C for the following operators:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"}," 1.  a, b           comma operator (not the comma between arguments)\n 2.  a && b         logical and\n 3.  a || b         logical or\n 4.  a ? b : c      conditional\n")),(0,a.kt)("p",null,"All of these guarantee that expression ",(0,a.kt)("inlineCode",{parentName:"p"},"a")," will be computed before expression ",(0,a.kt)("inlineCode",{parentName:"p"},"b")," (or ",(0,a.kt)("inlineCode",{parentName:"p"},"c"),")."),(0,a.kt)("p",null,"In addition, when a function-call takes place all arguments are evaluated before control transfers to the function."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"}," 5.  a(b) function call\n")),(0,a.kt)("p",null,"ANSI C++ guarantees that each full expression will be evaluated before going on."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"6. each full expression\n")))}c.isMDXComponent=!0},8209:(e,t,n)=>{n(7294)}}]);